/* tslint:disable */
/* eslint-disable */
/**
 * FLECS Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductCategory } from './ProductCategory';
import {
    ProductCategoryFromJSON,
    ProductCategoryFromJSONTyped,
    ProductCategoryToJSON,
    ProductCategoryToJSONTyped,
} from './ProductCategory';
import type { ProductStore } from './ProductStore';
import {
    ProductStoreFromJSON,
    ProductStoreFromJSONTyped,
    ProductStoreToJSON,
    ProductStoreToJSONTyped,
} from './ProductStore';
import type { ProductAttribute } from './ProductAttribute';
import {
    ProductAttributeFromJSON,
    ProductAttributeFromJSONTyped,
    ProductAttributeToJSON,
    ProductAttributeToJSONTyped,
} from './ProductAttribute';
import type { ProductMetadata } from './ProductMetadata';
import {
    ProductMetadataFromJSON,
    ProductMetadataFromJSONTyped,
    ProductMetadataToJSON,
    ProductMetadataToJSONTyped,
} from './ProductMetadata';

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    shortDescription: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    averageRating: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    ratingCount: number;
    /**
     * 
     * @type {Array<ProductCategory>}
     * @memberof Product
     */
    categories: Array<ProductCategory>;
    /**
     * 
     * @type {Array<ProductAttribute>}
     * @memberof Product
     */
    attributes: Array<ProductAttribute>;
    /**
     * 
     * @type {Array<ProductMetadata>}
     * @memberof Product
     */
    metaData: Array<ProductMetadata>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    stockStatus: string;
    /**
     * 
     * @type {ProductStore}
     * @memberof Product
     */
    store: ProductStore;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    permalink: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    price: string;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    purchasable: boolean;
}

/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): value is Product {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('shortDescription' in value) || value['shortDescription'] === undefined) return false;
    if (!('averageRating' in value) || value['averageRating'] === undefined) return false;
    if (!('ratingCount' in value) || value['ratingCount'] === undefined) return false;
    if (!('categories' in value) || value['categories'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    if (!('metaData' in value) || value['metaData'] === undefined) return false;
    if (!('stockStatus' in value) || value['stockStatus'] === undefined) return false;
    if (!('store' in value) || value['store'] === undefined) return false;
    if (!('permalink' in value) || value['permalink'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('purchasable' in value) || value['purchasable'] === undefined) return false;
    return true;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'status': json['status'],
        'description': json['description'],
        'shortDescription': json['short_description'],
        'averageRating': json['average_rating'],
        'ratingCount': json['rating_count'],
        'categories': ((json['categories'] as Array<any>).map(ProductCategoryFromJSON)),
        'attributes': ((json['attributes'] as Array<any>).map(ProductAttributeFromJSON)),
        'metaData': ((json['meta_data'] as Array<any>).map(ProductMetadataFromJSON)),
        'stockStatus': json['stock_status'],
        'store': ProductStoreFromJSON(json['store']),
        'permalink': json['permalink'],
        'price': json['price'],
        'purchasable': json['purchasable'],
    };
}

export function ProductToJSON(json: any): Product {
    return ProductToJSONTyped(json, false);
}

export function ProductToJSONTyped(value?: Product | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'status': value['status'],
        'description': value['description'],
        'short_description': value['shortDescription'],
        'average_rating': value['averageRating'],
        'rating_count': value['ratingCount'],
        'categories': ((value['categories'] as Array<any>).map(ProductCategoryToJSON)),
        'attributes': ((value['attributes'] as Array<any>).map(ProductAttributeToJSON)),
        'meta_data': ((value['metaData'] as Array<any>).map(ProductMetadataToJSON)),
        'stock_status': value['stockStatus'],
        'store': ProductStoreToJSON(value['store']),
        'permalink': value['permalink'],
        'price': value['price'],
        'purchasable': value['purchasable'],
    };
}

