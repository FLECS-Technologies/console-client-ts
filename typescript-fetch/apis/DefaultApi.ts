/* tslint:disable */
/* eslint-disable */
/**
 * FLECS Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIV2AuthLoginPostRequest,
  APIV2AuthLoginPostResponse,
  APIV2AuthValidatePostRequest,
  APIV2AuthValidatePostResponse,
  ErrorDescription,
  GetApiV2ManifestsAppVersion200Response,
  GetApiV2ManifestsAppVersion404Response,
  PostApiV2Tokens200Response,
  PostApiV2TokensRequest,
  SessionId,
} from '../models/index';
import {
    APIV2AuthLoginPostRequestFromJSON,
    APIV2AuthLoginPostRequestToJSON,
    APIV2AuthLoginPostResponseFromJSON,
    APIV2AuthLoginPostResponseToJSON,
    APIV2AuthValidatePostRequestFromJSON,
    APIV2AuthValidatePostRequestToJSON,
    APIV2AuthValidatePostResponseFromJSON,
    APIV2AuthValidatePostResponseToJSON,
    ErrorDescriptionFromJSON,
    ErrorDescriptionToJSON,
    GetApiV2ManifestsAppVersion200ResponseFromJSON,
    GetApiV2ManifestsAppVersion200ResponseToJSON,
    GetApiV2ManifestsAppVersion404ResponseFromJSON,
    GetApiV2ManifestsAppVersion404ResponseToJSON,
    PostApiV2Tokens200ResponseFromJSON,
    PostApiV2Tokens200ResponseToJSON,
    PostApiV2TokensRequestFromJSON,
    PostApiV2TokensRequestToJSON,
    SessionIdFromJSON,
    SessionIdToJSON,
} from '../models/index';

export interface GetApiV2ManifestsAppVersionRequest {
    xSessionId: string;
    app: string;
    version: string;
    maxManifestVersion?: string;
    manifestVersion?: string;
}

export interface PostApiV2AuthLoginRequest {
    aPIV2AuthLoginPostRequest?: APIV2AuthLoginPostRequest;
}

export interface PostApiV2AuthValidateRequest {
    aPIV2AuthValidatePostRequest?: APIV2AuthValidatePostRequest;
}

export interface PostApiV2TokensOperationRequest {
    xSessionId: string;
    postApiV2TokensRequest?: PostApiV2TokensRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get the app manifest for a given app and version
     * Download App manifest
     */
    async getApiV2ManifestsAppVersionRaw(requestParameters: GetApiV2ManifestsAppVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApiV2ManifestsAppVersion200Response>> {
        if (requestParameters['xSessionId'] == null) {
            throw new runtime.RequiredError(
                'xSessionId',
                'Required parameter "xSessionId" was null or undefined when calling getApiV2ManifestsAppVersion().'
            );
        }

        if (requestParameters['app'] == null) {
            throw new runtime.RequiredError(
                'app',
                'Required parameter "app" was null or undefined when calling getApiV2ManifestsAppVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling getApiV2ManifestsAppVersion().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['maxManifestVersion'] != null) {
            queryParameters['max_manifest_version'] = requestParameters['maxManifestVersion'];
        }

        if (requestParameters['manifestVersion'] != null) {
            queryParameters['manifest_version'] = requestParameters['manifestVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xSessionId'] != null) {
            headerParameters['X-Session-Id'] = String(requestParameters['xSessionId']);
        }

        const response = await this.request({
            path: `/api/v2/manifests/{app}/{version}`.replace(`{${"app"}}`, encodeURIComponent(String(requestParameters['app']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiV2ManifestsAppVersion200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the app manifest for a given app and version
     * Download App manifest
     */
    async getApiV2ManifestsAppVersion(requestParameters: GetApiV2ManifestsAppVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApiV2ManifestsAppVersion200Response> {
        const response = await this.getApiV2ManifestsAppVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login to console as user with password
     * Log in
     */
    async postApiV2AuthLoginRaw(requestParameters: PostApiV2AuthLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIV2AuthLoginPostResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIV2AuthLoginPostRequestToJSON(requestParameters['aPIV2AuthLoginPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIV2AuthLoginPostResponseFromJSON(jsonValue));
    }

    /**
     * Login to console as user with password
     * Log in
     */
    async postApiV2AuthLogin(requestParameters: PostApiV2AuthLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIV2AuthLoginPostResponse> {
        const response = await this.postApiV2AuthLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate authentication token
     * Create api validate
     */
    async postApiV2AuthValidateRaw(requestParameters: PostApiV2AuthValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIV2AuthValidatePostResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/auth/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIV2AuthValidatePostRequestToJSON(requestParameters['aPIV2AuthValidatePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIV2AuthValidatePostResponseFromJSON(jsonValue));
    }

    /**
     * Validate authentication token
     * Create api validate
     */
    async postApiV2AuthValidate(requestParameters: PostApiV2AuthValidateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIV2AuthValidatePostResponse> {
        const response = await this.postApiV2AuthValidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a download token for a given app and version
     * Acquire download token for App
     */
    async postApiV2TokensRaw(requestParameters: PostApiV2TokensOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostApiV2Tokens200Response>> {
        if (requestParameters['xSessionId'] == null) {
            throw new runtime.RequiredError(
                'xSessionId',
                'Required parameter "xSessionId" was null or undefined when calling postApiV2Tokens().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xSessionId'] != null) {
            headerParameters['X-Session-Id'] = String(requestParameters['xSessionId']);
        }

        const response = await this.request({
            path: `/api/v2/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiV2TokensRequestToJSON(requestParameters['postApiV2TokensRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostApiV2Tokens200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a download token for a given app and version
     * Acquire download token for App
     */
    async postApiV2Tokens(requestParameters: PostApiV2TokensOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostApiV2Tokens200Response | null | undefined > {
        const response = await this.postApiV2TokensRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

}
