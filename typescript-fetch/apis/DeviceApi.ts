/* tslint:disable */
/* eslint-disable */
/**
 * FLECS Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorDescription,
  PostApiV2DeviceLicenseActivate200Response,
  PostApiV2DeviceLicenseActivateRequest,
  PostApiV2DeviceLicenseValidate200Response,
  SessionId,
} from '../models/index';
import {
    ErrorDescriptionFromJSON,
    ErrorDescriptionToJSON,
    PostApiV2DeviceLicenseActivate200ResponseFromJSON,
    PostApiV2DeviceLicenseActivate200ResponseToJSON,
    PostApiV2DeviceLicenseActivateRequestFromJSON,
    PostApiV2DeviceLicenseActivateRequestToJSON,
    PostApiV2DeviceLicenseValidate200ResponseFromJSON,
    PostApiV2DeviceLicenseValidate200ResponseToJSON,
    SessionIdFromJSON,
    SessionIdToJSON,
} from '../models/index';

export interface PostApiV2DeviceLicenseActivateOperationRequest {
    authorization?: string;
    xSessionId?: string;
    postApiV2DeviceLicenseActivateRequest?: PostApiV2DeviceLicenseActivateRequest;
}

export interface PostApiV2DeviceLicenseValidateRequest {
    xSessionId: string;
}

/**
 * 
 */
export class DeviceApi extends runtime.BaseAPI {

    /**
     * Activate device via user license or device serial number
     * Activate license
     */
    async postApiV2DeviceLicenseActivateRaw(requestParameters: PostApiV2DeviceLicenseActivateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostApiV2DeviceLicenseActivate200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xSessionId'] != null) {
            headerParameters['X-Session-Id'] = String(requestParameters['xSessionId']);
        }

        const response = await this.request({
            path: `/api/v2/device/license/activate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiV2DeviceLicenseActivateRequestToJSON(requestParameters['postApiV2DeviceLicenseActivateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostApiV2DeviceLicenseActivate200ResponseFromJSON(jsonValue));
    }

    /**
     * Activate device via user license or device serial number
     * Activate license
     */
    async postApiV2DeviceLicenseActivate(requestParameters: PostApiV2DeviceLicenseActivateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostApiV2DeviceLicenseActivate200Response | null | undefined > {
        const response = await this.postApiV2DeviceLicenseActivateRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Validate the device license based on the session id
     * Validate license
     */
    async postApiV2DeviceLicenseValidateRaw(requestParameters: PostApiV2DeviceLicenseValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostApiV2DeviceLicenseValidate200Response>> {
        if (requestParameters['xSessionId'] == null) {
            throw new runtime.RequiredError(
                'xSessionId',
                'Required parameter "xSessionId" was null or undefined when calling postApiV2DeviceLicenseValidate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xSessionId'] != null) {
            headerParameters['X-Session-Id'] = String(requestParameters['xSessionId']);
        }

        const response = await this.request({
            path: `/api/v2/device/license/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostApiV2DeviceLicenseValidate200ResponseFromJSON(jsonValue));
    }

    /**
     * Validate the device license based on the session id
     * Validate license
     */
    async postApiV2DeviceLicenseValidate(requestParameters: PostApiV2DeviceLicenseValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostApiV2DeviceLicenseValidate200Response> {
        const response = await this.postApiV2DeviceLicenseValidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
