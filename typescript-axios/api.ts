/* tslint:disable */
/* eslint-disable */
/**
 * FLECS Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface APIV2AuthLoginPostRequest
 */
export interface APIV2AuthLoginPostRequest {
    /**
     * 
     * @type {boolean}
     * @memberof APIV2AuthLoginPostRequest
     */
    'issueJWT'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof APIV2AuthLoginPostRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof APIV2AuthLoginPostRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface APIV2AuthLoginPostResponse
 */
export interface APIV2AuthLoginPostResponse {
    /**
     * 
     * @type {Data}
     * @memberof APIV2AuthLoginPostResponse
     */
    'data'?: Data;
    /**
     * 
     * @type {number}
     * @memberof APIV2AuthLoginPostResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof APIV2AuthLoginPostResponse
     */
    'statusText'?: string;
}
/**
 * 
 * @export
 * @interface APIV2AuthValidatePostRequest
 */
export interface APIV2AuthValidatePostRequest {
    /**
     * 
     * @type {Jwt1}
     * @memberof APIV2AuthValidatePostRequest
     */
    'jwt'?: Jwt1;
}
/**
 * 
 * @export
 * @interface APIV2AuthValidatePostResponse
 */
export interface APIV2AuthValidatePostResponse {
    /**
     * 
     * @type {Data1}
     * @memberof APIV2AuthValidatePostResponse
     */
    'data'?: Data1;
    /**
     * 
     * @type {number}
     * @memberof APIV2AuthValidatePostResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof APIV2AuthValidatePostResponse
     */
    'statusText'?: string;
}
/**
 * 
 * @export
 * @interface ActivationData
 */
export interface ActivationData {
    /**
     * 
     * @type {SessionId}
     * @memberof ActivationData
     */
    'sessionId': SessionId;
    /**
     * 
     * @type {string}
     * @memberof ActivationData
     */
    'licenseKey': string;
}
/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street_1': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street_2': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'zip': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'state': string;
}
/**
 * 
 * @export
 * @interface AppResponse
 */
export interface AppResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponse
     */
    'totalProducts': number;
    /**
     * 
     * @type {Array<Product>}
     * @memberof AppResponse
     */
    'products': Array<Product>;
}
/**
 * 
 * @export
 * @interface Data
 */
export interface Data {
    /**
     * 
     * @type {FeatureFlags}
     * @memberof Data
     */
    'feature_flags'?: FeatureFlags;
    /**
     * 
     * @type {Jwt}
     * @memberof Data
     */
    'jwt'?: Jwt;
    /**
     * 
     * @type {User}
     * @memberof Data
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface Data1
 */
export interface Data1 {
    /**
     * 
     * @type {FeatureFlags1}
     * @memberof Data1
     */
    'feature_flags'?: FeatureFlags1;
    /**
     * 
     * @type {boolean}
     * @memberof Data1
     */
    'isValid'?: boolean;
}
/**
 * 
 * @export
 * @interface ErrorDescription
 */
export interface ErrorDescription {
    /**
     * 
     * @type {string}
     * @memberof ErrorDescription
     */
    'reason'?: string;
    /**
     * 
     * @type {number}
     * @memberof ErrorDescription
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorDescription
     */
    'statusText'?: string;
}
/**
 * 
 * @export
 * @interface FeatureFlags
 */
export interface FeatureFlags {
    /**
     * 
     * @type {boolean}
     * @memberof FeatureFlags
     */
    'isVendor'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FeatureFlags
     */
    'isWhitelabeled'?: boolean;
}
/**
 * 
 * @export
 * @interface FeatureFlags1
 */
export interface FeatureFlags1 {
    /**
     * 
     * @type {Ff}
     * @memberof FeatureFlags1
     */
    'ff'?: Ff;
}
/**
 * 
 * @export
 * @interface Ff
 */
export interface Ff {
    /**
     * 
     * @type {boolean}
     * @memberof Ff
     */
    'isVendor'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Ff
     */
    'isWhitelabeled'?: boolean;
}
/**
 * 
 * @export
 * @interface GetApiV2ManifestsAppVersion200Response
 */
export interface GetApiV2ManifestsAppVersion200Response {
    /**
     * 
     * @type {number}
     * @memberof GetApiV2ManifestsAppVersion200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetApiV2ManifestsAppVersion200Response
     */
    'statusText'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetApiV2ManifestsAppVersion200Response
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface GetApiV2ManifestsAppVersion404Response
 */
export interface GetApiV2ManifestsAppVersion404Response {
    /**
     * 
     * @type {number}
     * @memberof GetApiV2ManifestsAppVersion404Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetApiV2ManifestsAppVersion404Response
     */
    'statusText'?: string;
}
/**
 * 
 * @export
 * @interface GetApiV2MySubscriptions200Response
 */
export interface GetApiV2MySubscriptions200Response {
    /**
     * 
     * @type {number}
     * @memberof GetApiV2MySubscriptions200Response
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof GetApiV2MySubscriptions200Response
     */
    'statusText'?: string;
    /**
     * 
     * @type {Subscriptions}
     * @memberof GetApiV2MySubscriptions200Response
     */
    'data': Subscriptions;
}
/**
 * 
 * @export
 * @interface GetApiV2Products200Response
 */
export interface GetApiV2Products200Response {
    /**
     * 
     * @type {number}
     * @memberof GetApiV2Products200Response
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof GetApiV2Products200Response
     */
    'statusText'?: string;
    /**
     * 
     * @type {ProductResponse}
     * @memberof GetApiV2Products200Response
     */
    'data': ProductResponse;
}
/**
 * 
 * @export
 * @interface GetApiV2ProductsApps200Response
 */
export interface GetApiV2ProductsApps200Response {
    /**
     * 
     * @type {number}
     * @memberof GetApiV2ProductsApps200Response
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof GetApiV2ProductsApps200Response
     */
    'statusText'?: string;
    /**
     * 
     * @type {AppResponse}
     * @memberof GetApiV2ProductsApps200Response
     */
    'data': AppResponse;
}
/**
 * 
 * @export
 * @interface GetApiV2ProductsAppsReviews201Response
 */
export interface GetApiV2ProductsAppsReviews201Response {
    /**
     * 
     * @type {number}
     * @memberof GetApiV2ProductsAppsReviews201Response
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof GetApiV2ProductsAppsReviews201Response
     */
    'statusText'?: string;
    /**
     * 
     * @type {ReviewResponse}
     * @memberof GetApiV2ProductsAppsReviews201Response
     */
    'data': ReviewResponse;
}
/**
 * 
 * @export
 * @interface Jwt
 */
export interface Jwt {
    /**
     * 
     * @type {string}
     * @memberof Jwt
     */
    'token'?: string;
    /**
     * 
     * @type {number}
     * @memberof Jwt
     */
    'token_expires'?: number;
}
/**
 * 
 * @export
 * @interface Jwt1
 */
export interface Jwt1 {
    /**
     * 
     * @type {string}
     * @memberof Jwt1
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'customer_id': number;
    /**
     * 
     * @type {Array<OrderLineItem>}
     * @memberof Order
     */
    'line_items': Array<OrderLineItem>;
    /**
     * 
     * @type {OrderBilling}
     * @memberof Order
     */
    'billing': OrderBilling;
}
/**
 * 
 * @export
 * @interface OrderBilling
 */
export interface OrderBilling {
    /**
     * 
     * @type {string}
     * @memberof OrderBilling
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderBilling
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderBilling
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderBilling
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface OrderLineItem
 */
export interface OrderLineItem {
    /**
     * 
     * @type {number}
     * @memberof OrderLineItem
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItem
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItem
     */
    'product_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItem
     */
    'variation_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItem
     */
    'quantity': number;
    /**
     * 
     * @type {object}
     * @memberof OrderLineItem
     */
    'image': object;
}
/**
 * 
 * @export
 * @interface PostApiV2DeviceLicenseActivate200Response
 */
export interface PostApiV2DeviceLicenseActivate200Response {
    /**
     * 
     * @type {ActivationData}
     * @memberof PostApiV2DeviceLicenseActivate200Response
     */
    'data': ActivationData;
    /**
     * 
     * @type {number}
     * @memberof PostApiV2DeviceLicenseActivate200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostApiV2DeviceLicenseActivate200Response
     */
    'statusText'?: string;
}
/**
 * 
 * @export
 * @interface PostApiV2DeviceLicenseActivateRequest
 */
export interface PostApiV2DeviceLicenseActivateRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiV2DeviceLicenseActivateRequest
     */
    'licenseKey'?: string;
}
/**
 * 
 * @export
 * @interface PostApiV2DeviceLicenseValidate200Response
 */
export interface PostApiV2DeviceLicenseValidate200Response {
    /**
     * 
     * @type {PostApiV2DeviceLicenseValidate200ResponseData}
     * @memberof PostApiV2DeviceLicenseValidate200Response
     */
    'data': PostApiV2DeviceLicenseValidate200ResponseData;
    /**
     * 
     * @type {number}
     * @memberof PostApiV2DeviceLicenseValidate200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostApiV2DeviceLicenseValidate200Response
     */
    'statusText'?: string;
}
/**
 * 
 * @export
 * @interface PostApiV2DeviceLicenseValidate200ResponseData
 */
export interface PostApiV2DeviceLicenseValidate200ResponseData {
    /**
     * 
     * @type {boolean}
     * @memberof PostApiV2DeviceLicenseValidate200ResponseData
     */
    'isValid': boolean;
}
/**
 * 
 * @export
 * @interface PostApiV2Tokens200Response
 */
export interface PostApiV2Tokens200Response {
    /**
     * 
     * @type {number}
     * @memberof PostApiV2Tokens200Response
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof PostApiV2Tokens200Response
     */
    'statusText'?: string;
    /**
     * 
     * @type {PostApiV2Tokens200ResponseData}
     * @memberof PostApiV2Tokens200Response
     */
    'data': PostApiV2Tokens200ResponseData;
}
/**
 * 
 * @export
 * @interface PostApiV2Tokens200ResponseData
 */
export interface PostApiV2Tokens200ResponseData {
    /**
     * 
     * @type {PostApiV2Tokens200ResponseDataToken}
     * @memberof PostApiV2Tokens200ResponseData
     */
    'token': PostApiV2Tokens200ResponseDataToken;
}
/**
 * 
 * @export
 * @interface PostApiV2Tokens200ResponseDataToken
 */
export interface PostApiV2Tokens200ResponseDataToken {
    /**
     * 
     * @type {string}
     * @memberof PostApiV2Tokens200ResponseDataToken
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV2Tokens200ResponseDataToken
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PostApiV2TokensRequest
 */
export interface PostApiV2TokensRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiV2TokensRequest
     */
    'app': string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV2TokensRequest
     */
    'version': string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'short_description': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'average_rating': string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'rating_count': number;
    /**
     * 
     * @type {Array<ProductCategory>}
     * @memberof Product
     */
    'categories': Array<ProductCategory>;
    /**
     * 
     * @type {Array<ProductAttribute>}
     * @memberof Product
     */
    'attributes': Array<ProductAttribute>;
    /**
     * 
     * @type {Array<ProductMetadata>}
     * @memberof Product
     */
    'meta_data': Array<ProductMetadata>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'stock_status': string;
    /**
     * 
     * @type {ProductStore}
     * @memberof Product
     */
    'store': ProductStore;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'permalink': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'price': string;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'purchasable': boolean;
}
/**
 * 
 * @export
 * @interface ProductAttribute
 */
export interface ProductAttribute {
    /**
     * 
     * @type {number}
     * @memberof ProductAttribute
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProductAttribute
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAttribute
     */
    'options': Array<string>;
}
/**
 * 
 * @export
 * @interface ProductCategory
 */
export interface ProductCategory {
    /**
     * 
     * @type {number}
     * @memberof ProductCategory
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface ProductMetadata
 */
export interface ProductMetadata {
    /**
     * 
     * @type {number}
     * @memberof ProductMetadata
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductMetadata
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof ProductMetadata
     */
    'value'?: object;
}
/**
 * 
 * @export
 * @interface ProductResponse
 */
export interface ProductResponse {
    /**
     * 
     * @type {number}
     * @memberof ProductResponse
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ProductResponse
     */
    'totalPages': number;
    /**
     * 
     * @type {Array<Product>}
     * @memberof ProductResponse
     */
    'products': Array<Product>;
}
/**
 * 
 * @export
 * @interface ProductStore
 */
export interface ProductStore {
    /**
     * 
     * @type {number}
     * @memberof ProductStore
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProductStore
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductStore
     */
    'shop_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductStore
     */
    'url': string;
    /**
     * 
     * @type {Address}
     * @memberof ProductStore
     */
    'address': Address;
}
/**
 * 
 * @export
 * @interface ReviewRequest
 */
export interface ReviewRequest {
    /**
     * 
     * @type {ReviewRequestData}
     * @memberof ReviewRequest
     */
    'data'?: ReviewRequestData;
    /**
     * 
     * @type {string}
     * @memberof ReviewRequest
     */
    'jwt'?: string;
}
/**
 * 
 * @export
 * @interface ReviewRequestData
 */
export interface ReviewRequestData {
    /**
     * 
     * @type {number}
     * @memberof ReviewRequestData
     */
    'product_id': number;
    /**
     * 
     * @type {string}
     * @memberof ReviewRequestData
     */
    'review': string;
    /**
     * 
     * @type {string}
     * @memberof ReviewRequestData
     */
    'reviewer': string;
    /**
     * 
     * @type {string}
     * @memberof ReviewRequestData
     */
    'reviewer_email': string;
    /**
     * 
     * @type {number}
     * @memberof ReviewRequestData
     */
    'rating': number;
}
/**
 * 
 * @export
 * @interface ReviewResponse
 */
export interface ReviewResponse {
    /**
     * 
     * @type {ReviewResponseReview}
     * @memberof ReviewResponse
     */
    'review': ReviewResponseReview;
}
/**
 * 
 * @export
 * @interface ReviewResponseReview
 */
export interface ReviewResponseReview {
    /**
     * 
     * @type {number}
     * @memberof ReviewResponseReview
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponseReview
     */
    'date_created': string;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponseReview
     */
    'date_created_gmt': string;
    /**
     * 
     * @type {number}
     * @memberof ReviewResponseReview
     */
    'product_id': number;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponseReview
     */
    'product_name': string;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponseReview
     */
    'product_permalink': string;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponseReview
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponseReview
     */
    'reviewer': string;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponseReview
     */
    'reviewer_email': string;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponseReview
     */
    'review': string;
    /**
     * 
     * @type {number}
     * @memberof ReviewResponseReview
     */
    'rating': number;
    /**
     * 
     * @type {boolean}
     * @memberof ReviewResponseReview
     */
    'verified': boolean;
}
/**
 * 
 * @export
 * @interface SessionId
 */
export interface SessionId {
    /**
     * 
     * @type {string}
     * @memberof SessionId
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionId
     */
    'timestamp'?: number;
}
/**
 * 
 * @export
 * @interface Subscriptions
 */
export interface Subscriptions {
    /**
     * 
     * @type {number}
     * @memberof Subscriptions
     */
    'totalSubscriptions': number;
    /**
     * 
     * @type {Array<Order>}
     * @memberof Subscriptions
     */
    'subscriptions': Array<Order>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'ID'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'user_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'user_login'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the app manifest for a given app and version
         * @summary Download App manifest
         * @param {string} xSessionId 
         * @param {string} app 
         * @param {string} version 
         * @param {string} [maxManifestVersion] 
         * @param {string} [manifestVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2ManifestsAppVersion: async (xSessionId: string, app: string, version: string, maxManifestVersion?: string, manifestVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSessionId' is not null or undefined
            assertParamExists('getApiV2ManifestsAppVersion', 'xSessionId', xSessionId)
            // verify required parameter 'app' is not null or undefined
            assertParamExists('getApiV2ManifestsAppVersion', 'app', app)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getApiV2ManifestsAppVersion', 'version', version)
            const localVarPath = `/api/v2/manifests/{app}/{version}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxManifestVersion !== undefined) {
                localVarQueryParameter['max_manifest_version'] = maxManifestVersion;
            }

            if (manifestVersion !== undefined) {
                localVarQueryParameter['manifest_version'] = manifestVersion;
            }


    
            if (xSessionId != null) {
                localVarHeaderParameter['X-Session-Id'] = String(xSessionId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login to console as user with password
         * @summary Log in
         * @param {APIV2AuthLoginPostRequest} [aPIV2AuthLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2AuthLogin: async (aPIV2AuthLoginPostRequest?: APIV2AuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aPIV2AuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate authentication token
         * @summary Create api validate
         * @param {APIV2AuthValidatePostRequest} [aPIV2AuthValidatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2AuthValidate: async (aPIV2AuthValidatePostRequest?: APIV2AuthValidatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/auth/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aPIV2AuthValidatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a download token for a given app and version
         * @summary Acquire download token for App
         * @param {string} xSessionId 
         * @param {PostApiV2TokensRequest} [postApiV2TokensRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2Tokens: async (xSessionId: string, postApiV2TokensRequest?: PostApiV2TokensRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSessionId' is not null or undefined
            assertParamExists('postApiV2Tokens', 'xSessionId', xSessionId)
            const localVarPath = `/api/v2/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xSessionId != null) {
                localVarHeaderParameter['X-Session-Id'] = String(xSessionId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiV2TokensRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the app manifest for a given app and version
         * @summary Download App manifest
         * @param {string} xSessionId 
         * @param {string} app 
         * @param {string} version 
         * @param {string} [maxManifestVersion] 
         * @param {string} [manifestVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV2ManifestsAppVersion(xSessionId: string, app: string, version: string, maxManifestVersion?: string, manifestVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV2ManifestsAppVersion200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV2ManifestsAppVersion(xSessionId, app, version, maxManifestVersion, manifestVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getApiV2ManifestsAppVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login to console as user with password
         * @summary Log in
         * @param {APIV2AuthLoginPostRequest} [aPIV2AuthLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV2AuthLogin(aPIV2AuthLoginPostRequest?: APIV2AuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIV2AuthLoginPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV2AuthLogin(aPIV2AuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postApiV2AuthLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validate authentication token
         * @summary Create api validate
         * @param {APIV2AuthValidatePostRequest} [aPIV2AuthValidatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV2AuthValidate(aPIV2AuthValidatePostRequest?: APIV2AuthValidatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIV2AuthValidatePostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV2AuthValidate(aPIV2AuthValidatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postApiV2AuthValidate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a download token for a given app and version
         * @summary Acquire download token for App
         * @param {string} xSessionId 
         * @param {PostApiV2TokensRequest} [postApiV2TokensRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV2Tokens(xSessionId: string, postApiV2TokensRequest?: PostApiV2TokensRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiV2Tokens200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV2Tokens(xSessionId, postApiV2TokensRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postApiV2Tokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Get the app manifest for a given app and version
         * @summary Download App manifest
         * @param {string} xSessionId 
         * @param {string} app 
         * @param {string} version 
         * @param {string} [maxManifestVersion] 
         * @param {string} [manifestVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2ManifestsAppVersion(xSessionId: string, app: string, version: string, maxManifestVersion?: string, manifestVersion?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetApiV2ManifestsAppVersion200Response> {
            return localVarFp.getApiV2ManifestsAppVersion(xSessionId, app, version, maxManifestVersion, manifestVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Login to console as user with password
         * @summary Log in
         * @param {APIV2AuthLoginPostRequest} [aPIV2AuthLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2AuthLogin(aPIV2AuthLoginPostRequest?: APIV2AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIV2AuthLoginPostResponse> {
            return localVarFp.postApiV2AuthLogin(aPIV2AuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate authentication token
         * @summary Create api validate
         * @param {APIV2AuthValidatePostRequest} [aPIV2AuthValidatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2AuthValidate(aPIV2AuthValidatePostRequest?: APIV2AuthValidatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIV2AuthValidatePostResponse> {
            return localVarFp.postApiV2AuthValidate(aPIV2AuthValidatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a download token for a given app and version
         * @summary Acquire download token for App
         * @param {string} xSessionId 
         * @param {PostApiV2TokensRequest} [postApiV2TokensRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2Tokens(xSessionId: string, postApiV2TokensRequest?: PostApiV2TokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostApiV2Tokens200Response> {
            return localVarFp.postApiV2Tokens(xSessionId, postApiV2TokensRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get the app manifest for a given app and version
     * @summary Download App manifest
     * @param {string} xSessionId 
     * @param {string} app 
     * @param {string} version 
     * @param {string} [maxManifestVersion] 
     * @param {string} [manifestVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiV2ManifestsAppVersion(xSessionId: string, app: string, version: string, maxManifestVersion?: string, manifestVersion?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiV2ManifestsAppVersion(xSessionId, app, version, maxManifestVersion, manifestVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login to console as user with password
     * @summary Log in
     * @param {APIV2AuthLoginPostRequest} [aPIV2AuthLoginPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiV2AuthLogin(aPIV2AuthLoginPostRequest?: APIV2AuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiV2AuthLogin(aPIV2AuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validate authentication token
     * @summary Create api validate
     * @param {APIV2AuthValidatePostRequest} [aPIV2AuthValidatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiV2AuthValidate(aPIV2AuthValidatePostRequest?: APIV2AuthValidatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiV2AuthValidate(aPIV2AuthValidatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a download token for a given app and version
     * @summary Acquire download token for App
     * @param {string} xSessionId 
     * @param {PostApiV2TokensRequest} [postApiV2TokensRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiV2Tokens(xSessionId: string, postApiV2TokensRequest?: PostApiV2TokensRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiV2Tokens(xSessionId, postApiV2TokensRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeviceApi - axios parameter creator
 * @export
 */
export const DeviceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Activate device via user license or device serial number
         * @summary Activate license
         * @param {string} [authorization] Provide only if activation via user license should be performed
         * @param {string} [xSessionId] Leave out if no sessionId is known.
         * @param {PostApiV2DeviceLicenseActivateRequest} [postApiV2DeviceLicenseActivateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2DeviceLicenseActivate: async (authorization?: string, xSessionId?: string, postApiV2DeviceLicenseActivateRequest?: PostApiV2DeviceLicenseActivateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/device/license/activate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xSessionId != null) {
                localVarHeaderParameter['X-Session-Id'] = String(xSessionId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiV2DeviceLicenseActivateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate the device license based on the session id
         * @summary Validate license
         * @param {string} xSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2DeviceLicenseValidate: async (xSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSessionId' is not null or undefined
            assertParamExists('postApiV2DeviceLicenseValidate', 'xSessionId', xSessionId)
            const localVarPath = `/api/v2/device/license/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (xSessionId != null) {
                localVarHeaderParameter['X-Session-Id'] = String(xSessionId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceApi - functional programming interface
 * @export
 */
export const DeviceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceApiAxiosParamCreator(configuration)
    return {
        /**
         * Activate device via user license or device serial number
         * @summary Activate license
         * @param {string} [authorization] Provide only if activation via user license should be performed
         * @param {string} [xSessionId] Leave out if no sessionId is known.
         * @param {PostApiV2DeviceLicenseActivateRequest} [postApiV2DeviceLicenseActivateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV2DeviceLicenseActivate(authorization?: string, xSessionId?: string, postApiV2DeviceLicenseActivateRequest?: PostApiV2DeviceLicenseActivateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiV2DeviceLicenseActivate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV2DeviceLicenseActivate(authorization, xSessionId, postApiV2DeviceLicenseActivateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeviceApi.postApiV2DeviceLicenseActivate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validate the device license based on the session id
         * @summary Validate license
         * @param {string} xSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV2DeviceLicenseValidate(xSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiV2DeviceLicenseValidate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV2DeviceLicenseValidate(xSessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeviceApi.postApiV2DeviceLicenseValidate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeviceApi - factory interface
 * @export
 */
export const DeviceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceApiFp(configuration)
    return {
        /**
         * Activate device via user license or device serial number
         * @summary Activate license
         * @param {string} [authorization] Provide only if activation via user license should be performed
         * @param {string} [xSessionId] Leave out if no sessionId is known.
         * @param {PostApiV2DeviceLicenseActivateRequest} [postApiV2DeviceLicenseActivateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2DeviceLicenseActivate(authorization?: string, xSessionId?: string, postApiV2DeviceLicenseActivateRequest?: PostApiV2DeviceLicenseActivateRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostApiV2DeviceLicenseActivate200Response> {
            return localVarFp.postApiV2DeviceLicenseActivate(authorization, xSessionId, postApiV2DeviceLicenseActivateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate the device license based on the session id
         * @summary Validate license
         * @param {string} xSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV2DeviceLicenseValidate(xSessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<PostApiV2DeviceLicenseValidate200Response> {
            return localVarFp.postApiV2DeviceLicenseValidate(xSessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
export class DeviceApi extends BaseAPI {
    /**
     * Activate device via user license or device serial number
     * @summary Activate license
     * @param {string} [authorization] Provide only if activation via user license should be performed
     * @param {string} [xSessionId] Leave out if no sessionId is known.
     * @param {PostApiV2DeviceLicenseActivateRequest} [postApiV2DeviceLicenseActivateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public postApiV2DeviceLicenseActivate(authorization?: string, xSessionId?: string, postApiV2DeviceLicenseActivateRequest?: PostApiV2DeviceLicenseActivateRequest, options?: RawAxiosRequestConfig) {
        return DeviceApiFp(this.configuration).postApiV2DeviceLicenseActivate(authorization, xSessionId, postApiV2DeviceLicenseActivateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validate the device license based on the session id
     * @summary Validate license
     * @param {string} xSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public postApiV2DeviceLicenseValidate(xSessionId: string, options?: RawAxiosRequestConfig) {
        return DeviceApiFp(this.configuration).postApiV2DeviceLicenseValidate(xSessionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all products
         * @summary Get all products
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2Products: async (storeId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['store_id'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all app products
         * @summary Get all app products
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2ProductsApps: async (storeId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/products/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['store_id'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a review for an app
         * @summary Post a review for an app
         * @param {ReviewRequest} [reviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2ProductsAppsReviews: async (reviewRequest?: ReviewRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/products/apps/reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all products
         * @summary Get all products
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV2Products(storeId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV2Products200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV2Products(storeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.getApiV2Products']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all app products
         * @summary Get all app products
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV2ProductsApps(storeId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV2ProductsApps200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV2ProductsApps(storeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.getApiV2ProductsApps']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post a review for an app
         * @summary Post a review for an app
         * @param {ReviewRequest} [reviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV2ProductsAppsReviews(reviewRequest?: ReviewRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV2ProductsAppsReviews201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV2ProductsAppsReviews(reviewRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.getApiV2ProductsAppsReviews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Get all products
         * @summary Get all products
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2Products(storeId?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetApiV2Products200Response> {
            return localVarFp.getApiV2Products(storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all app products
         * @summary Get all app products
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2ProductsApps(storeId?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetApiV2ProductsApps200Response> {
            return localVarFp.getApiV2ProductsApps(storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a review for an app
         * @summary Post a review for an app
         * @param {ReviewRequest} [reviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2ProductsAppsReviews(reviewRequest?: ReviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetApiV2ProductsAppsReviews201Response> {
            return localVarFp.getApiV2ProductsAppsReviews(reviewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Get all products
     * @summary Get all products
     * @param {number} [storeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getApiV2Products(storeId?: number, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getApiV2Products(storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all app products
     * @summary Get all app products
     * @param {number} [storeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getApiV2ProductsApps(storeId?: number, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getApiV2ProductsApps(storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post a review for an app
     * @summary Post a review for an app
     * @param {ReviewRequest} [reviewRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getApiV2ProductsAppsReviews(reviewRequest?: ReviewRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getApiV2ProductsAppsReviews(reviewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all products for a specific user
         * @summary Get all products for a specific user
         * @param {string} authorization 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2MyProducts: async (authorization: string, storeId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getApiV2MyProducts', 'authorization', authorization)
            const localVarPath = `/api/v2/my/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['store_id'] = storeId;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all app products for a specific user
         * @summary Get all app products for a specific user
         * @param {string} authorization 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2MyProductsApps: async (authorization: string, storeId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getApiV2MyProductsApps', 'authorization', authorization)
            const localVarPath = `/api/v2/my/products/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['store_id'] = storeId;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all subscriptions of a specific user
         * @summary Get all subscriptions of a specific user
         * @param {string} authorization 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2MySubscriptions: async (authorization: string, storeId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getApiV2MySubscriptions', 'authorization', authorization)
            const localVarPath = `/api/v2/my/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['store_id'] = storeId;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all products for a specific user
         * @summary Get all products for a specific user
         * @param {string} authorization 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV2MyProducts(authorization: string, storeId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV2Products200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV2MyProducts(authorization, storeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getApiV2MyProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all app products for a specific user
         * @summary Get all app products for a specific user
         * @param {string} authorization 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV2MyProductsApps(authorization: string, storeId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV2Products200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV2MyProductsApps(authorization, storeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getApiV2MyProductsApps']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all subscriptions of a specific user
         * @summary Get all subscriptions of a specific user
         * @param {string} authorization 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV2MySubscriptions(authorization: string, storeId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV2MySubscriptions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV2MySubscriptions(authorization, storeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getApiV2MySubscriptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Get all products for a specific user
         * @summary Get all products for a specific user
         * @param {string} authorization 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2MyProducts(authorization: string, storeId?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetApiV2Products200Response> {
            return localVarFp.getApiV2MyProducts(authorization, storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all app products for a specific user
         * @summary Get all app products for a specific user
         * @param {string} authorization 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2MyProductsApps(authorization: string, storeId?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetApiV2Products200Response> {
            return localVarFp.getApiV2MyProductsApps(authorization, storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all subscriptions of a specific user
         * @summary Get all subscriptions of a specific user
         * @param {string} authorization 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV2MySubscriptions(authorization: string, storeId?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetApiV2MySubscriptions200Response> {
            return localVarFp.getApiV2MySubscriptions(authorization, storeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Get all products for a specific user
     * @summary Get all products for a specific user
     * @param {string} authorization 
     * @param {number} [storeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getApiV2MyProducts(authorization: string, storeId?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getApiV2MyProducts(authorization, storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all app products for a specific user
     * @summary Get all app products for a specific user
     * @param {string} authorization 
     * @param {number} [storeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getApiV2MyProductsApps(authorization: string, storeId?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getApiV2MyProductsApps(authorization, storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all subscriptions of a specific user
     * @summary Get all subscriptions of a specific user
     * @param {string} authorization 
     * @param {number} [storeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getApiV2MySubscriptions(authorization: string, storeId?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getApiV2MySubscriptions(authorization, storeId, options).then((request) => request(this.axios, this.basePath));
    }
}



